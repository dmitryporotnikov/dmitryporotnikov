<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on My New Hugo Site</title><link>http://localhost:1313/categories/linux/</link><description>Recent content in Linux on My New Hugo Site</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 10 Jun 2024 08:46:23 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting Up Chrony for Time Synchronization in Azure VMs</title><link>http://localhost:1313/docs/legacy/2024-06-10-azure-linux-vm-time-synchronization/</link><pubDate>Mon, 10 Jun 2024 08:46:23 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-06-10-azure-linux-vm-time-synchronization/</guid><description>Azure VMs have several options for maintaining accurate time:
1. VMs can inherit time from their host (host time).
2. VMs can synchronize directly with an external time server.
3. A combination of both methods can be used.
When VMs restart, experience network traffic, or undergo maintenance, their clocks might drift. Azure helps manage this through the VMICTimeSync service and the integration of the Precision Time Protocol. Azure hosts are synced to Microsoft’s internal time servers, connected to GPS-antenna-equipped Stratum 1 devices.</description></item><item><title>Resolving the &amp;#8220;Argument list too long&amp;#8221; Error When Deleting Files in Linux</title><link>http://localhost:1313/docs/legacy/2024-04-23-resolving-argument-list-too-long-error-linux/</link><pubDate>Tue, 23 Apr 2024 08:46:11 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-04-23-resolving-argument-list-too-long-error-linux/</guid><description>When working on Linux, you may occasionally encounter the error /bin/rm: cannot execute [Argument list too long] while attempting to delete a large number of files. This issue typically arises when the shell command exceeds the allowed limit for arguments.
Suppose you have a directory filled with files ending with the extension .garbagefile, and you decide to clean up by deleting them. You might use the following command:
rm -f *.</description></item><item><title>One-liner to add new privileged user to Azure Linux VM using run command</title><link>http://localhost:1313/docs/legacy/2024-03-27-one-liner-to-add-new-privileged-user-to-azure-linux-vm-using-run-command/</link><pubDate>Wed, 27 Mar 2024 11:02:42 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-03-27-one-liner-to-add-new-privileged-user-to-azure-linux-vm-using-run-command/</guid><description>When executed on an Azure VM running Linux (e.g from Run Command), this command effectively creates a new user named recovery, sets their password, and grants them sudo privileges.
sudo useradd -m recovery -s /bin/bash -p $(echo testpasswd1! | openssl passwd -1 -stdin) &amp;amp;&amp;amp; sudo usermod -aG sudo recovery</description></item><item><title>Troubleshooting a Non-Working Linux Cron Job with Strace</title><link>http://localhost:1313/docs/legacy/2024-03-21-tracing-cron-jobs/</link><pubDate>Thu, 21 Mar 2024 09:23:52 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-03-21-tracing-cron-jobs/</guid><description>If you’re facing issues with a cron job that’s not working as expected on your Linux system, one effective way to troubleshoot the problem is by using the strace utility. It is a powerful debugging tool that can trace system calls and signals, allowing you to gain insights into the behavior of a running process.
The command I’m using is:
for pid in $(pgrep cron); do strace -f -p $pid -o /tmp/strace_output_$pid.</description></item><item><title>Adventures with Arch Linux on an Old Laptop &amp;#8211; Dell Latitude E5570</title><link>http://localhost:1313/docs/legacy/2024-03-17-revitalize-dell-latitude-e5570-arch-linux/</link><pubDate>Sun, 17 Mar 2024 13:55:06 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-03-17-revitalize-dell-latitude-e5570-arch-linux/</guid><description>I have an old laptop, a Dell Latitude E5570, and I wanted to revitalize it. Unfortunately, Windows 11 is not supported on this model without registry hacks, and I preferred not to install an unsupported product. Therefore, I decided to try Arch Linux, as the documentation indicated it should be supported:
Laptop/Dell – ArchWiki (archlinux.org)
I started to follow official installation guide:
Installation guide – ArchWiki (archlinux.org)
Created bootable flash drive with dd:</description></item><item><title>Setting Up a Flask Web Application with Gunicorn on WSL</title><link>http://localhost:1313/docs/legacy/2023-10-18-setting-up-a-flask-web-application-with-gunicorn-on-wsl/</link><pubDate>Wed, 18 Oct 2023 09:00:45 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-10-18-setting-up-a-flask-web-application-with-gunicorn-on-wsl/</guid><description>Here are the steps needed to create a flask app served by Gunicorn on WSL:
Step 1: Install Required Packages # Before we begin, it’s essential to make sure that Python and pip (Python’s package installer) are installed on your WSL terminal. To do so, open your WSL terminal and execute the following commands:
sudo apt update sudo apt install python3 python3-pip sudo apt install python3.10-venv
This will update your package list and install Python 3, pip, and the Python 3.</description></item><item><title>Streamlining Linux System Diagnostics: An Open-Source, Web-Based Approach</title><link>http://localhost:1313/docs/legacy/2023-10-03-linux-aio-performance-checker-real-time-diagnostics/</link><pubDate>Tue, 03 Oct 2023 22:53:43 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-10-03-linux-aio-performance-checker-real-time-diagnostics/</guid><description>To bridge this gap, my friend and colleague developed an open-source solution called Linux AIO Performance Checker.
This tool is designed for real-time diagnostics and performance issue resolution, rather than long-term monitoring. It is particularly useful for scenarios where actual monitoring metrics are collected at higher (e.g. 5 minute) intervals.
The automated script uses a range of Linux diagnostic tools, categorized as follows:
CPU Diagnostics: mpstat, pidstat, uptime Memory Diagnostics: vmstat, free Storage Diagnostics: iostat, df -h, lsblk -f, parted -l, pvdisplay, vgdisplay, lvdisplay, pvscan, vgscan, lvscan, ls -l /dev/mapper, iotop Generic OS Information: date, top, ps -H, sar, os-release, last installed updates The script automates the execution of these diagnostic tools at certain intervals, capturing and parsing their output into a structured format.</description></item><item><title>Hosting a Custom ChatGPT Web UI with Your Own API Keys</title><link>http://localhost:1313/docs/legacy/2023-09-16-hosting-a-custom-chatgpt-web-ui-with-your-own-api-keys/</link><pubDate>Sat, 16 Sep 2023 23:04:22 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-09-16-hosting-a-custom-chatgpt-web-ui-with-your-own-api-keys/</guid><description>With the increasing popularity of ChatGPT, many IT enthusiasts are exploring ways to host their custom ChatGPT web frontends. There are several options available ranging from the Microsoft’s “Azure Open AI at scale” project to various third-party ones. However, for this exercise I’ve picked a 3rd party one, as it is lightweight, doesn’t require any extra components such as Azure Active Directory Microsoft Entra ID or databases to function, and it is very easy to deploy.</description></item></channel></rss>