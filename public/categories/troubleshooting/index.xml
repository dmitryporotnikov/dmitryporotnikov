<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Troubleshooting on My New Hugo Site</title><link>http://localhost:1313/categories/troubleshooting/</link><description>Recent content in Troubleshooting on My New Hugo Site</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 21 Mar 2024 09:23:52 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/troubleshooting/index.xml" rel="self" type="application/rss+xml"/><item><title>Troubleshooting a Non-Working Linux Cron Job with Strace</title><link>http://localhost:1313/docs/legacy/2024-03-21-tracing-cron-jobs/</link><pubDate>Thu, 21 Mar 2024 09:23:52 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-03-21-tracing-cron-jobs/</guid><description>If you’re facing issues with a cron job that’s not working as expected on your Linux system, one effective way to troubleshoot the problem is by using the strace utility. It is a powerful debugging tool that can trace system calls and signals, allowing you to gain insights into the behavior of a running process.
The command I’m using is:
for pid in $(pgrep cron); do strace -f -p $pid -o /tmp/strace_output_$pid.</description></item><item><title>How to Create Your Own Custom Filter Driver for Windows</title><link>http://localhost:1313/docs/legacy/2024-02-01-create-custom-filter-driver-windows/</link><pubDate>Thu, 01 Feb 2024 01:25:46 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-02-01-create-custom-filter-driver-windows/</guid><description>A Windows Filter Driver is a specialized driver within the Microsoft Windows operating system. It serves as a mechanism to intercept and modify the behavior of specific system operations. These drivers function at a low level within the operating system, enabling the monitoring or alteration of interactions between the OS and its hardware or software components. Filter drivers essentially “filter” I/O requests (input/output), intercepting and potentially modifying them for a particular device or file system.</description></item><item><title>How to install WinDBG preview (Windows Store version) on Windows Server?</title><link>http://localhost:1313/docs/legacy/2024-01-30-install-windbg-windows-server-no-windows-store/</link><pubDate>Tue, 30 Jan 2024 11:20:24 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2024-01-30-install-windbg-windows-server-no-windows-store/</guid><description>Windows Debugger is an essential tool for developers and IT professionals working with Windows environments. However, if you’re using Windows Server, you might encounter a unique challenge: WinDbg preview is typically available as a Windows Store package, but Windows Server installations do not include the Windows Store. This guide will walk you through an alternative method to install WinDbg on your Windows Server.
The first step is to visit the official WinDbg documentation page at Microsoft’s WinDbg Guide.</description></item><item><title>PowerShell: Script-Based Workaround for Renaming Azure VMs and Switching to Unsupported Sizes</title><link>http://localhost:1313/docs/legacy/2023-10-10-bypassing-azure-vm-limitations-script-based-solution/</link><pubDate>Tue, 10 Oct 2023 14:48:05 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-10-10-bypassing-azure-vm-limitations-script-based-solution/</guid><description>Inability to change the name of an existing Azure VM. Constraints when resizing VMs, specifically: You can’t resize a VM size that has a local temp disk to a VM size without one, and vice versa. The only combinations allowed for resizing are:
VM (with no local temp disk) -&amp;gt; VM (with no local temp disk) VM (with local temp disk) -&amp;gt; VM (with local temp disk) Workaround # Below is a PowerShell script that allows you to circumvent the VM name and size restrictions while keeping the disk, network interface card, and extensions in place.</description></item><item><title>Streamlining Linux System Diagnostics: An Open-Source, Web-Based Approach</title><link>http://localhost:1313/docs/legacy/2023-10-03-linux-aio-performance-checker-real-time-diagnostics/</link><pubDate>Tue, 03 Oct 2023 22:53:43 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-10-03-linux-aio-performance-checker-real-time-diagnostics/</guid><description>To bridge this gap, my friend and colleague developed an open-source solution called Linux AIO Performance Checker.
This tool is designed for real-time diagnostics and performance issue resolution, rather than long-term monitoring. It is particularly useful for scenarios where actual monitoring metrics are collected at higher (e.g. 5 minute) intervals.
The automated script uses a range of Linux diagnostic tools, categorized as follows:
CPU Diagnostics: mpstat, pidstat, uptime Memory Diagnostics: vmstat, free Storage Diagnostics: iostat, df -h, lsblk -f, parted -l, pvdisplay, vgdisplay, lvdisplay, pvscan, vgscan, lvscan, ls -l /dev/mapper, iotop Generic OS Information: date, top, ps -H, sar, os-release, last installed updates The script automates the execution of these diagnostic tools at certain intervals, capturing and parsing their output into a structured format.</description></item><item><title>Reverse Engineering .NET Applications Without Using Assembler</title><link>http://localhost:1313/docs/legacy/2023-10-01-reverse-engineering-dotnet-applications-without-assembler/</link><pubDate>Sun, 01 Oct 2023 21:55:05 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-10-01-reverse-engineering-dotnet-applications-without-assembler/</guid><description>Reverse engineering is a common practice in software development, often used for debugging, security auditing, or even academic research. While many might associate reverse engineering with delving into complex assembler code, it’s possible to reverse engineer .NET applications without touching assembler at all. In this blog post, we’ll explore why and how you can peek into .NET application code, demonstrate this with a sample application, and discuss potential solutions for protecting your code.</description></item><item><title>How to resolve the NLA error in Azure VMs when the computer object is removed from Active Directory</title><link>http://localhost:1313/docs/legacy/2023-09-22-how-to-resolve-the-nla-error-in-azure-vms-when-the-computer-object-is-removed-from-active-directory/</link><pubDate>Fri, 22 Sep 2023 21:05:09 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-09-22-how-to-resolve-the-nla-error-in-azure-vms-when-the-computer-object-is-removed-from-active-directory/</guid><description>If you’re working with Azure Virtual Machines, you might encounter a situation where you see an error related to Network Level Authentication. This typically arises when your VM loses communication with the Domain Controller, the trust relationship between the VM and DC is compromised, or the VM’s computer object has been removed from the DC.
Navigate to the Azure portal.
Locate the VM that is experiencing the NLA error.
Click Run Command.</description></item><item><title>How to Track Registry Key Modifications Using Process Monitor</title><link>http://localhost:1313/docs/legacy/2023-08-28-how-to-track-registry-key-modifications-using-process-monitor/</link><pubDate>Mon, 28 Aug 2023 12:57:25 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-08-28-how-to-track-registry-key-modifications-using-process-monitor/</guid><description>Modifying registry keys is a common operation that can be performed by both system and user processes. But what happens when a registry key value changes unexpectedly, leading to system behavior that’s hard to diagnose? Knowing exactly which process modified a registry key can be invaluable in system administration and debugging scenarios. One powerful tool that can help you identify such changes in real-time is Sysinternals Process Monitor.
In this blog post, I’ll guide you through setting up Process Monitor to capture only the relevant events related to a specific registry key modification.</description></item><item><title>Azure Nested Virtualization: Hyper-V cannot be installed because virtualization support is not enabled in the BIOS.</title><link>http://localhost:1313/docs/legacy/2023-08-25-azure-nested-virtualization-hyper-v-cannot-be-installed-because-virtualization-support-is-not-enabled-in-the-bios/</link><pubDate>Fri, 25 Aug 2023 16:54:41 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-08-25-azure-nested-virtualization-hyper-v-cannot-be-installed-because-virtualization-support-is-not-enabled-in-the-bios/</guid><description>Nested virtualization is an exciting and powerful feature that allows you to run a virtual machine within another virtual machine. This capability has numerous applications in the fields of development, testing, and security. However, when trying to enable it in Azure, you may encounter a specific error related to nested virtualization:
Fortunately, the fix for this problem is relatively straightforward and can be done directly through the Command Prompt. Here’s a step-by-step guide:</description></item><item><title>How to restart Group Policy Client Service (GPSVC)</title><link>http://localhost:1313/docs/legacy/2023-08-24-how-to-restart-group-policy-client-service-gpsvc/</link><pubDate>Thu, 24 Aug 2023 14:54:07 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-08-24-how-to-restart-group-policy-client-service-gpsvc/</guid><description>Are you facing difficulties in restarting the Group Policy Client service? It’s a common issue that many have run into, especially when they find the option grayed out in the services list or receive an “Access is Denied” error from the command line. Let’s dive into why this happens and how you can get around it.
Understanding the Issue # The Group Policy Client service requires specific permissions to manage, specifically System account permissions.</description></item><item><title>Capture network traffic using windows built in tools</title><link>http://localhost:1313/docs/legacy/2023-08-22-capture-network-traffic-using-windows-built-in-tools/</link><pubDate>Tue, 22 Aug 2023 10:36:34 +0000</pubDate><guid>http://localhost:1313/docs/legacy/2023-08-22-capture-network-traffic-using-windows-built-in-tools/</guid><description>Start the capture:
netsh trace start capture=yes level=5 tracefile=c:\temp\%computername%_nettrace.etl scenario=netconnection
&amp;lt;reproduce the issue&amp;gt;
Stop the capture:
netsh trace stop
Convert the resulting file to wireshark format:
GitHub – microsoft/etl2pcapng: Utility that converts an .etl file containing a Windows network packet capture into .pcapng format.</description></item></channel></rss>